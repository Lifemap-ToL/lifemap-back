---
- name: Base lifemap-back install
  hosts: lifemap-back

  tasks:
      - name: Copy env to docker-compose directory
        ansible.builtin.template:
            src: templates/env.j2
            dest: "{{ docker_dir }}/.env"
            mode: "0600"
            force: true

      - name: Copy env to home directory
        ansible.builtin.template:
            src: templates/env.j2
            dest: "/home/{{ ansible_user }}/.env"
            mode: "0600"
            force: true

      - name: Check if docker-compose.yml already exists
        ansible.builtin.stat:
            path: "{{ docker_dir }}/docker-compose.yml"
        register: docker_compose

      - name: Stop containers if needed
        become: true
        ansible.builtin.command:
            chdir: "{{ docker_dir }}"
            cmd: docker compose -f docker-compose.yml down
        changed_when: true
        when: docker_compose.stat.exists

      - name: Rsync docker files
        ansible.posix.synchronize:
            src: "../back/"
            dest: "{{ docker_dir }}"
            rsync_opts:
                - "--exclude=*.j2"

      - name: Copy datasource-settings to style directory
        become: true
        ansible.builtin.template:
            src: ../back/mod_tile_deepzoom/datasource-settings.xml.inc.j2
            dest: "{{ docker_dir }}/mod_tile_deepzoom/style/inc/datasource-settings.xml.inc"
            mode: preserve
            force: true

      - name: Copy bbox.toml to bbox docker directory
        become: true
        ansible.builtin.template:
            src: ../back/bbox/bbox.toml.j2
            dest: "{{ docker_dir }}/bbox/bbox.toml"
            mode: preserve
            force: true

      - name: Build and launch containers
        become: true
        ansible.builtin.command:
            chdir: "{{ docker_dir }}"
            cmd: docker compose -f docker-compose.yml up -d --build
        changed_when: true

      - name: Wait for Solr to be up
        ansible.builtin.uri:
            url: "https://{{ backend_hostname }}/solr/"
            status_code: 200
            validate_certs: false
        register: solr_main_page
        until: solr_main_page.status == 200
        retries: 20
        delay: 5

      - name: Check solr password
        ansible.builtin.uri:
            url: "https://{{ backend_hostname }}/solr/admin/authentication"
            method: POST
            user: "solr"
            password: "SolrRocks"
            validate_certs: false
            force_basic_auth: true
            status_code: [200, 401]
            headers:
                Content-Type: "application/json"
            body_format: json
            body: "{}"
        register: login_result

      - name: Change solr password
        ansible.builtin.uri:
            url: "https://{{ backend_hostname }}/solr/admin/authentication"
            method: POST
            user: "solr"
            password: "SolrRocks"
            validate_certs: false
            force_basic_auth: true
            headers:
                Content-Type: "application/json"
            body_format: json
            body: '{"set-user": {"solr": "{{ solr_password }}"} }'
        when: login_result.status == 200
